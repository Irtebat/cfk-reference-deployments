apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: confluent
spec:
  replicas: 3
  oneReplicaPerNode: true
  dataVolumeCapacity: 50G
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: confluentinc/confluent-init-container:2.11.0
  # storageClass:
  #     name: local-storage
  podTemplate:
    resources:
      limits:
        cpu: "1000m"   
        memory: "10240Mi" 
      requests:
        cpu: "500m"   
        memory: "1024Mi" 
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: nodetype
                  operator: In
                  values:
                    - kraft
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: confluent
  annotations:
    platform.confluent.io/force-reconcile: "true"
    platform.confluent.io/pod-overlay-configmap-name: "kafka-pod-overlay"
spec:
  replicas: 3
  oneReplicaPerNode: true
  image:
    application: docker.io/confluentinc/cp-server:7.9.0
    init: confluentinc/confluent-init-container:2.11.0
  dependencies:
    kRaftController:
      clusterRef:
        name: kraftcontroller
  dataVolumeCapacity: 130G
  # storageClass:
  #     name: local-storage
  listeners:
    external:
      externalAccess:
        type: loadBalancer
        loadBalancer:
          domain: <your-domain>
          brokerPrefix: broker-
  configOverrides:
    server:
      - sasl.enabled.mechanisms=GSSAPI
      - sasl.mechanism.inter.broker.protocol=PLAINTEXT
      - listener.security.protocol.map=INTERNAL:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT,REPLICATION:PLAINTEXT,CONTROLLER:PLAINTEXT
      - listeners=INTERNAL://:9071,EXTERNAL://:9092,REPLICATION://:9072
      - sasl.kerberos.service.name=kafka
    jvm:
      - -Dsun.security.krb5.debug=true
      - -Djava.security.auth.login.config=/mnt/jaas/broker-jaas.conf
      - -Djava.security.krb5.conf=/mnt/kerberos/krb5.conf
  mountedVolumes:
    volumes:
      - name: kerberos-config
        configMap:
          name: kafka-kerberos-config
      - name: kerberos-kafka-secret
        secret:
          secretName: kafka-keytab-secret
      - name: kerberos-jaas
        emptyDir: {}
    volumeMounts:
      - name: kerberos-config
        mountPath: /mnt/kerberos
        readOnly: true
      - name: kerberos-kafka-secret
        mountPath: /mnt/kerberos/kafka-keytab
        readOnly: true
      - name: kerberos-jaas
        mountPath: /mnt/jaas/
        readOnly: true
  podTemplate:
    resources:
      limits:
        cpu: "3000m"   
        memory: "10240Mi" 
      requests:
        cpu: "600m"  
        memory: "1024Mi" 
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: nodetype
                  operator: In
                  values:
                    - kraft
---
apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: jio
spec:
  replicas: 1
  oneReplicaPerNode: true
  image:
    application: confluentinc/cp-enterprise-control-center:7.6.0
    init: confluentinc/confluent-init-container:2.8.0
  # dependencies:
  #   kafka:
  #     bootstrapEndpoint: <external-endpoint>
  externalAccess:
    type: loadBalancer
    loadBalancer:
      domain: <your-domain>
  # configOverrides:
  #   server:
  #     - confluent.controlcenter.streams.sasl.mechanism=GSSAPI
  #     - confluent.controlcenter.streams.security.protocol=SASL_PLAINTEXT
  #     - confluent.controlcenter.streams.sasl.kerberos.service.name=kafka
  #     - confluent.controlcenter.streams.sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab="/mnt/kerberos/c3-keytab/c3.keytab" principal="c3@example.com";
  #     - confluent.metrics.reporter.sasl.mechanism=GSSAPI
  #     - confluent.metrics.reporter.security.protocol=SASL_SSL
  #     - confluent.metrics.reporter.sasl.kerberos.service.name=kafka
  #     - confluent.metrics.reporter.sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true storeKey=true keyTab="/mnt/kerberos/c3-keytab/c3.keytab" principal="c3@example.com";
  #     - confluent.controlcenter.schema.registry.enable=false
  #   jvm:
  #     - -Dsun.security.krb5.debug=true
  #     - -Djava.security.krb5.conf=/mnt/kerberos/krb5.conf
  # mountedVolumes:
  #   volumes:
  #     - name: kerberos-config
  #       configMap:
  #         name: kafka-kerberos-config
  #     - name: kerberos-c3-secret
  #       secret:
  #         secretName: c3-keytab-secret
  #   volumeMounts:
  #     - name: kerberos-config
  #       configMap:
  #         name: kafka-kerberos-config
  #     - name: kerberos-c3-secret
  #       mountPath: /mnt/kerberos/c3-keytab
  #       readOnly: true
  dataVolumeCapacity: 100Gi
  podTemplate:
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
    resources:
      limits:
        cpu: "2000m"
        memory: "10240Mi"
      requests:
        cpu: "500m"
        memory: "1024Mi"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: nodetype
                  operator: In
                  values:
                    - controlcenter
 
